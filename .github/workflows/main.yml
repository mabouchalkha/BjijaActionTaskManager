name: Build and Publish NuGet Package

on:
  push:
    branches:
      - master # Trigger the action only when code is pushed to the main branch
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.x' # Adjust this to your project's .NET version
        
    - name: Execute unit tests
      run: dotnet test

    - name: Extract Version from csproj
      run: |
        $xml = [xml](Get-Content ./BjijaActionTaskManager/BjijaActionTaskManager.csproj)
        $version = $xml.Project.PropertyGroup.Version
        $splitVersion = $version -split '\.'
        $major = [int]$splitVersion[0]
        $minor = [int]$splitVersion[1] + 1
        $patch = [int]$splitVersion[2]
        $newVersion = "$major.$minor.$patch"
        $xml.Project.PropertyGroup.Version = $newVersion
        $xml.Save("./BjijaActionTaskManager/BjijaActionTaskManager.csproj")
        echo "PACKAGE_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
        
    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    # Automatically update version number here if you need. Otherwise, manage it manually in your .csproj file
    
    - name: Pack
      run: dotnet pack --configuration Release --no-build -o out /p:PackageVersion=${{ env.PACKAGE_VERSION }} # You can adjust versioning strategy

    - name: List directory
      run: ls -R out/

    - name: Push to NuGet
      run: |
        $package = Get-ChildItem -Path ./out/ -Filter *.nupkg | Select-Object -First 1
        dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      shell: pwsh
